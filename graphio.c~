/*
 * COMP20007 Design of Algorithms
 * Semester 1 2016
 *
 * Clement Poh (cpoh@unimelb.edu.au)
 *
 * This module provides all the IO functionality related to graphs.
 *
*/
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>

#include "graphio.h"

#define MAX_LINE_LEN 256
#define ZERO 0
#define TWO 2
#define OFFSET_V 2
#define DEBUG 0


/* create a vertex inside a graph_t vertices array */
void create_vertex(Graph graph, char* line, int vertex);

/* print out graphically representation of graph */
void print_graph(char* output, Graph graph);

/* print out vertex-edge relationship in specified format */
void print_vertex(Vertex vertex, FILE* file);

/*check a pointer has been successful in malloc acquisition*/
void check_malloc(void* pointer){
	if(!pointer){
		fprintf(stderr, "Malloc error, abort");
		exit(EXIT_FAILURE);
	}
}

/* print out vertex-edge relationship in specified format */
void print_vertex(Vertex vertex, FILE* file){
	int i;
	List current = NULL, backwards = NULL;
	
	/*print leading white space*/
	for ( i = 0; i < OFFSET_V; i++){
		fprintf(file, " ");
	}
	
	/*print vertex name and outgoing edges as per formatting instructions*/
	if (vertex->out != NULL){
		fprintf(file, "%s -> {  ", vertex->label);
		
		backwards = (List)malloc(len(vertex->out)*sizeof(struct list_t));
		check_malloc(backwards);
		backwards = reverse(vertex->out);
		current = backwards;
		
		while(current != NULL){
			
			fprintf(file, "%s  ", ((Vertex)(current->data))->label);
			current = current->next;
		}
		fprintf(file, "}\n");
		free(backwards);
		backwards = NULL;
	}
	else{
		fprintf(file, "%s\n", vertex->label);
	}
	return;
}

/* create a vertex inside a graph_t vertices array */
void create_vertex(Graph graph, char* line, int vertex){
	
	graph->vertices[vertex].id = vertex;
	graph->vertices[vertex].label = (char*)malloc((strlen(line) + 1)*
		sizeof(char));
	check_malloc(graph->vertices[vertex].label);
	strcpy(graph->vertices[vertex].label, line);
	graph->vertices[vertex].in = NULL;
	graph->vertices[vertex].out = NULL;
	return;
}
/* Loads the graph from input */
Graph load_graph(char *input) {
    FILE* outline = NULL;
	char* line = NULL;
	Graph graph;
	int order = 0, size = 0, i, v1 = 0, v2 =0;
	
	if(DEBUG){fprintf(stderr, "preopen\n");};
	
	line = (char*)malloc((MAX_LINE_LEN+1)*sizeof(char));
	check_malloc(line);
	outline = fopen(input, "r");
	
	if(DEBUG){fprintf(stderr, "file opened\n");};
	
	/*scan through lines of input and record order and vertex information*/
	if (outline != NULL){
		
		/*record order*/
		fscanf(outline, "%d\n", &order);
		graph = new_graph(order);
		
		if(DEBUG){fprintf(stderr, "pre for loop\n");};

		/*retrieve and record vertex information*/
		for(i = 0; i < order; i++){
			fscanf(outline, "%s\n", line);
			create_vertex(graph, line, i);
			if(DEBUG){fprintf(stderr, "%s\n", graph->vertices[i].label);};
		}
		
		/*accumulate graph size and create edge links between vertices*/
		if(DEBUG){fprintf(stderr, "pre while loop\n");};
		while (fscanf(outline, "%d %d\n", &v1, &v2) != EOF){
			if(DEBUG){fprintf(stderr, "while loop iteration\n");};
			size++;
			
			if(DEBUG){fprintf(stderr, "pre add_edge\n v1 is %d v2 is %d\n", 
			v1, v2);};
			
			add_edge(graph, v1, v2);
		}
		if(DEBUG){fprintf(stderr, "while loop completed\n");};
	/*record graph size, release all memory no longer required*/
		graph->size = size;
		
		fclose(outline);
		free(line);
		line = NULL;
		outline = NULL;
		
		return graph;
	}
	/*if file fails to open, abort protocol*/
	else{
		fprintf(stderr, "%s\n", "EXIT_INPUT_FAILURE");
		exit(EXIT_FAILURE);
	}
}

/* Prints the graph */
void print_graph(char *output, Graph graph) {
	FILE* outfile;
	int i;
	
	outfile = fopen(output, "w+");
	fprintf(outfile,"digraph {\n");
	
	for(i = 0; i < graph->order; i++){
		print_vertex((graph->vertices) + i, outfile);
	}
	
	fprintf(outfile, "}\n");
	fclose(outfile);
	outfile = NULL;
	
	return;	
}

/* Prints the destination vertex label surrounded by spaces */
void print_vertex_label(FILE *file, void *vertex) {
}

/* Prints the id of a vertex then a newline */
void print_vertex_id(FILE *file, void *vertex) {
    if (vertex)
        fprintf(file, "%d\n", ((Vertex)vertex)->id);
}

/* Returns a sequence of vertices read from file */
List load_vertex_sequence(FILE *file, Graph graph) {
    const char *err_duplicate = "Error: duplicate vertex %d %s\n";
    const char *err_order = "Error: graph order %d, loaded %d vertices\n";
    List list = NULL;
    int id;

    while(fscanf(file, "%d\n", &id) == 1) {
        assert(id >= 0);
        assert(id < graph->order);

        if (!insert_if(id_eq, graph->vertices + id, &list)) {
            fprintf(stderr, err_duplicate, id, graph->vertices[id].label);
            exit(EXIT_FAILURE);
        }
    }

    if (len(list) != graph->order) {
        fprintf(stderr, err_order, graph->order, len(list));
        exit(EXIT_FAILURE);
    }

    return list;
}
